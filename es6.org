#+TITLE: Typescript (ES6)

* Static attributes and methods

  Static methods can be called on the class directly:

  #+BEGIN_SRC js
  class Pony {
    static defaultSpeed() {
      return 10;
    }
  }

  const speed = Pony.defaultSpeed();
  #+END_SRC

* Promises

  #+BEGIN_SRC js
  const getUser = (login) => {
    return new Promise((resolve, reject) => {
      if (response.status === 200)
        resolve(response.data);
      else
        reject('No user');
    });
  };

  getUser(login)
    .then(user => console.log(user));
  #+END_SRC

* Union
  
  If a variable is require to have multiple types exclusively.

  #+BEGIN_SRC js
    let changing: number | boolean = 2;
    changing = true;
  #+END_SRC

* Enums

  By default enum starts with 0.

  #+BEGIN_SRC js
    enum Status { Ready, Started, Done }
    const progress = Status.Started;
  #+END_SRC

  But custom values can also be set.

  #+BEGIN_SRC js
    enum Medal { Gold = 1, Silver, Bronze }
  #+END_SRC
  
* Return type
  
  We can set the return type of a function like so:

  #+BEGIN_SRC js
    function startRace(race: Race): Race {
      race.status = Status.Started;
      return race;
    }
  #+END_SRC
  
  If the function returns nothing, return ~void~.
  
* Interfaces
  
  When a function has an arguments that require a specific property, we can use interfaces to define the "shape" of that object.

  #+BEGIN_SRC js
    function addPointsToScore(player: { score: number; }, points: number): void {
      player.score += points;
    }
  #+END_SRC
  
  It means that the parameter must have a propert called ~score~ of the type ~number~. We can name these interfaces like so:

  #+BEGIN_SRC js
    interface HasScore {
      score: number;
    }

    function addPointsToScore(player: HasScore, points: number): void {
      player.score += points;
    }
  #+END_SRC

* Optional Arguments

  JS arguments are optional, but in TypeScript the compiler will complain if parameters with types are forgotten.

  We can add a ~?~ after the parameter to make it optional.

  #+BEGIN_SRC js
    function addPointsToScore(player: HasScore, points?: number): void {
      points = points || 0;
      player.score += points;
    }
  #+END_SRC

